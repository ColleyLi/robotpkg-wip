Force parallax to be positive when retracting on a ParallaxAnglePoint3

--- gtsam/geometry/ParallaxAnglePoint3.cpp	2015-06-16 13:15:09.731247987 +0200
+++ gtsam/geometry/ParallaxAnglePoint3.cpp	2015-06-08 18:04:35.066192803 +0200
@@ -71,6 +71,18 @@
 }

 /* ************************************************************************* */
+ParallaxAnglePoint3 ParallaxAnglePoint3::retract(const Vector& v) const
+{
+  ParallaxAnglePoint3 point = (*this + v);
+
+  // Force parallax to be positive
+  if(point.parallax_ < 1e-6)
+    point.parallax_ = 1e-6;
+
+  return point;
+}
+
+/* ************************************************************************* */
 ostream &operator<<(ostream &os, const ParallaxAnglePoint3& p) {
   os << '(' << p.yaw() << ", " << p.pitch() << ", " << p.parallax() << ')';
   return os;
--- gtsam/geometry/ParallaxAnglePoint3.h	2015-06-16 13:15:09.731247987 +0200
+++ gtsam/geometry/ParallaxAnglePoint3.h	2015-06-08 17:59:50.022579786 +0200
@@ -145,7 +145,7 @@
     inline size_t dim() const { return dimension; }

     /// Updates a with tangent space delta
-    inline ParallaxAnglePoint3 retract(const Vector& v) const { return ParallaxAnglePoint3(*this + v); }
+    ParallaxAnglePoint3 retract(const Vector& v) const;

     /// Returns inverse retraction
     inline Vector3 localCoordinates(const ParallaxAnglePoint3& q) const { return (q - *this).vector(); }
--- gtsam/slam/ParallaxAngleProjectionFactor.h	2015-06-16 13:15:09.731247987 +0200
+++ gtsam/slam/ParallaxAngleProjectionFactor.h	2015-06-16 13:14:29.170816055 +0200
@@ -948,7 +948,7 @@
         if (Dpoint)  *Dpoint = zeros(2,3);
         if (verboseCheirality_)
           std::cout << e.what() << ": Landmark "<< DefaultKeyFormatter(this->key4()) <<
-              " with anchors (" << DefaultKeyFormatter(this->key1()) << "," << DefaultKeyFormatter(this->key2()) <<
+              " with anchors (" << DefaultKeyFormatter(this->key1()) << "," << DefaultKeyFormatter(this->key2()) << ")" <<
               " moved behind camera " << DefaultKeyFormatter(this->key3()) << std::endl;
         if (throwCheirality_)
           throw e;
