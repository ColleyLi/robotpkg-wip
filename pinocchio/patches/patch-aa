diff --git CMakeLists.txt CMakeLists.txt
index 7cd8628..f5877cb 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -85,15 +85,15 @@ ADD_OPTIONAL_DEPENDENCY("urdfdom >= 0.2.0")
 ADD_OPTIONAL_DEPENDENCY("lua5.1")
 ADD_OPTIONAL_DEPENDENCY("hpp-fcl >= 0.4.2")
 
-# Spetcial care of Eigen3 greater than 3.2.9
+# Spetcial care of Eigen3 greater than 3.2.10
 IF(EIGEN3_FOUND)
-  IF(${EIGEN3_VERSION} VERSION_GREATER "3.2.9")
+  IF(${EIGEN3_VERSION} VERSION_GREATER "3.2.10")
     ADD_DEFINITIONS(-DEIGEN3_FUTURE)
     SET(EIGEN3_FUTURE TRUE)
     PKG_CONFIG_APPEND_CFLAGS("-DEIGEN3_FUTURE")
-  ELSE(${EIGEN3_VERSION} VERSION_GREATER "3.2.9")
+  ELSE(${EIGEN3_VERSION} VERSION_GREATER "3.2.10")
     SET(EIGEN3_FUTURE FALSE)
-  ENDIF(${EIGEN3_VERSION} VERSION_GREATER "3.2.9")
+  ENDIF(${EIGEN3_VERSION} VERSION_GREATER "3.2.10")
 ENDIF(EIGEN3_FOUND)
 
 # Special care of urdfdom less than 0.3.0
diff --git bindings/python/CMakeLists.txt bindings/python/CMakeLists.txt
index caded16..ec619a9 100644
--- bindings/python/CMakeLists.txt
+++ bindings/python/CMakeLists.txt
@@ -58,8 +58,7 @@ FOREACH(dep ${PKG_CONFIG_PYWRAP_REQUIRES})
 ENDFOREACH(dep ${PKG_CONFIG_PYWRAP_REQUIRES})
 
 # --- LIBRARY --- #
-SET(${PYWRAP}_INSTALL_DIR ${PYTHON_SITELIB}/${PROJECT_NAME})
-MESSAGE(STATUS ${${PYWRAP}_INSTALL_DIR})
+SET(${PYWRAP}_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/${PYTHON_SITELIB}/${PROJECT_NAME})
 
 SET(${PROJECT_NAME}_PYTHON_HEADERS
   eigen_container.hpp
diff --git bindings/python/scripts/robot_wrapper.py bindings/python/scripts/robot_wrapper.py
index 2a08271..0dc2271 100644
--- bindings/python/scripts/robot_wrapper.py
+++ bindings/python/scripts/robot_wrapper.py
@@ -36,13 +36,13 @@ class RobotWrapper(object):
             self.collision_model = None
             self.visual_model = None
             self.collision_data = None
+            self.visual_data = None
             if verbose:
                 print 'Info: the Geometry Module has not been compiled with Pinocchio. No geometry model and data have been built.'
         else:
             if package_dirs is None:
                 self.collision_model = se3.buildGeomFromUrdf(self.model, filename)
                 self.visual_model = se3.buildGeomFromUrdf(self.model, filename)
-                self.collision_data = se3.GeometryData(self.data, self.collision_model)
             else:
                 if not all(isinstance(item, basestring) for item in package_dirs):
                     raise Exception('The list of package directories is wrong. At least one is not a string')
@@ -51,7 +51,8 @@ class RobotWrapper(object):
                                                                 utils.fromListToVectorOfString(package_dirs), se3.GeometryType.COLLISION)
                     self.visual_model = se3.buildGeomFromUrdf(self.model, filename,
                                                                 utils.fromListToVectorOfString(package_dirs), se3.GeometryType.VISUAL)
-                    self.collision_data = se3.GeometryData(self.collision_model)
+            self.collision_data = se3.GeometryData(self.collision_model)
+            self.visual_data = se3.GeometryData(self.visual_model)
 
         self.v0 = utils.zero(self.nv)
         self.q0 = utils.zero(self.nq)
@@ -123,8 +124,11 @@ class RobotWrapper(object):
     def computeJacobians(self, q):
         return se3.computeJacobians(self.model, self.data, q)
 
-    def updateGeometryPlacements(self, q):
-        se3.updateGeometryPlacements(self.model, self.data, self.collision_model, self.collision_data, q)
+    def updateGeometryPlacements(self, q, visual=False):
+        if visual:
+            se3.updateGeometryPlacements(self.model, self.data, self.visual_model, self.visual_data, q)
+        else:
+            se3.updateGeometryPlacements(self.model, self.data, self.collision_model, self.collision_data, q)
 
 
     # --- ACCESS TO NAMES ----
@@ -188,11 +192,10 @@ class RobotWrapper(object):
         if 'viewer' not in self.__dict__:
             return
         # Update the robot kinematics and geometry.
-        self.updateGeometryPlacements(q)
-
+        self.updateGeometryPlacements(q,visual=True)
 
         for visual in self.visual_model.geometryObjects :
-            M = self.collision_data.oMg[self.visual_model.getGeometryId(visual.name)]
+            M = self.visual_data.oMg[self.visual_model.getGeometryId(visual.name)]
             pinocchioConf = utils.se3ToXYZQUAT(M)
             viewerConf = utils.XYZQUATToViewerConfiguration(pinocchioConf)
             self.viewer.gui.applyConfiguration(self.viewerNodeNames(visual), viewerConf)
diff --git bindings/python/scripts/utils.py bindings/python/scripts/utils.py
index 4d28fa8..2ab882e 100644
--- bindings/python/scripts/utils.py
+++ bindings/python/scripts/utils.py
@@ -85,7 +85,7 @@ def isapprox(a, b, epsilon=1e-6):
     return abs(a - b) < epsilon
 
 
-def mprint(M, name="ans"):
+def mprint(M, name="ans",eps=1e-15):
     '''
     Matlab-style pretty matrix print.
     '''
@@ -96,10 +96,12 @@ def mprint(M, name="ans"):
     print name, " = "
     print
 
-    Mm = abs(M[np.nonzero(M)]).min()
-    MM = abs(M[np.nonzero(M)]).max()
+    Mmin = lambda M: M.min() if np.nonzero(M)[1].shape[1]>0 else M.sum()
+    Mmax = lambda M: M.max() if np.nonzero(M)[1].shape[1]>0 else M.sum()
+    Mm = Mmin(abs(M[np.nonzero(M)]))
+    MM = Mmax(abs(M[np.nonzero(M)]))
 
-    fmt = "%.4e" if Mm < 1e-2 or MM > 1e6 or MM / Mm > 1e3 else "% 1.5f"
+    fmt = "% 10.3e" if Mm < 1e-5 or MM > 1e6 or MM / Mm > 1e3 else "% 1.5f"
 
     for i in range((ncol - 1) / NC + 1):
         cmin = i * 6
@@ -110,7 +112,8 @@ def mprint(M, name="ans"):
         for r in range(M.shape[0]):
             sys.stdout.write("  ")
             for c in range(cmin, cmax):
-                sys.stdout.write(fmt % M[r, c] + "   ")
+                if abs(M[r,c])>eps: sys.stdout.write(fmt % M[r,c]  + "   ")
+                else: sys.stdout.write(" 0"+" "*9)
             print
         print
 
