From 511e95f03480537ff18ad2cad178c504b1cfbb53 Mon Sep 17 00:00:00 2001
From: Jose Luis Blanco <joseluisblancoc@gmail.com>
Date: Mon, 23 Dec 2013 00:57:02 +0100
Subject: [PATCH] CSemaphore::waitForSignal() : Fixed error when thread got an
 external signal

---
 doc/doxygen-pages/changeLog_doc.h      |  2 +-
 libs/base/src/synch/CSemaphore_LIN.cpp | 17 +++++++++++------
 2 files changed, 12 insertions(+), 7 deletions(-)

diff --git a/libs/base/src/synch/CSemaphore_LIN.cpp b/libs/base/src/synch/CSemaphore_LIN.cpp
index 32554bc..d01c9ea 100644
--- libs/base/src/synch/CSemaphore_LIN.cpp
+++ libs/base/src/synch/CSemaphore_LIN.cpp
@@ -163,17 +163,22 @@ bool CSemaphore::waitForSignal( unsigned int timelimit )
 	}
 
 #else
-	rc = timelimit==0 ?
+	if (timelimit==0)
+	{
 		// No timeout
-		sem_wait( token->semid )
-		:
+		rc = sem_wait( token->semid );
+	}
+	else
+	{
 		// We have a timeout:
-		sem_timedwait( token->semid, &tm );
-#endif
-	
+		while ((rc = sem_timedwait( token->semid, &tm )) == -1 && errno == EINTR)
+			continue; // Restart if interrupted by handler
+	}
+
 	// If there's an error != than a timeout, dump to stderr:
 	if (rc!=0 && errno!=ETIMEDOUT)
 		std::cerr << format("[CSemaphore::waitForSignal] In semaphore named '%s', error: %s\n", m_name.c_str(),strerror(errno) );
+#endif
 
 	return rc==0; // true: all ok.
 
-- 
1.8.5.1

