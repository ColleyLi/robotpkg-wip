--- src/dynamic_graph/ros/__init__.py
+++ src/dynamic_graph/ros/__init__.py
@@ -1,34 +1,4 @@
-from dynamic_graph.sot.dynamics_pinocchio import DynamicPinocchio
 from ros_publish import RosPublish
 from ros_subscribe import RosSubscribe
-from ros_joint_state import RosJointState
-
 from ros import Ros
 
-# aliases, for retro compatibility
-from ros import RosPublish as RosImport
-from ros import RosSubscribe as RosExport
-
-
-class RosRobotModel(DynamicPinocchio):
-    def __init__(self, name):
-        DynamicPinocchio.__init__(self, name)
-        self.namespace = "sot_controller"
-        self.jointsParameterName_ = "jrl_map"
-
-    def setJointsNamesParameter(self):
-        import rospy
-        if self.model is not None:
-            parameter_name = self.namespace + "/" + jointsParameterName_
-            jointsName = []
-            for i in xrange(self.model.njoints):
-                jointsName.append(self.model.names[i])
-            rospy.set_param(parameter_name,jointsName)
-        return
-
-    def setNamespace(self, ns):
-        self.namespace = ns
-        return
-
-    def curConf(self):
-        return self.position.value
--- src/dynamic_graph/ros/ros.py
+++ src/dynamic_graph/ros/ros.py
@@ -1,6 +1,5 @@
 from ros_publish import RosPublish
 from ros_subscribe import RosSubscribe
-from ros_joint_state import RosJointState
 from ros_time import RosTime
 
 from dynamic_graph import plug
@@ -9,7 +8,6 @@ class Ros(object):
     device = None
     rosPublish = None
     rosSubscribe = None
-    rosJointState = None
 
     # aliases, for retro compatibility
     rosImport = None
@@ -19,15 +17,10 @@ class Ros(object):
         self.robot = robot
         self.rosPublish = RosPublish('rosPublish{0}'.format(suffix))
         self.rosSubscribe = RosSubscribe('rosSubscribe{0}'.format(suffix))
-        self.rosJointState = RosJointState('rosJointState{0}'.format(suffix))
-        self.rosJointState.retrieveJointNames(self.robot.dynamic.name)
         self.rosTime = RosTime ('rosTime{0}'.format(suffix))
 
-        plug(self.robot.device.state, self.rosJointState.state)
         self.robot.device.after.addSignal(
             '{0}.trigger'.format(self.rosPublish.name))
-        self.robot.device.after.addSignal(
-            '{0}.trigger'.format(self.rosJointState.name))
 
         # aliases, for retro compatibility
         self.rosImport=self.rosPublish
