[c++] patch to extract values from MatrixHomogeneous Signal

diff --git src/signal-base-py.cc src/signal-base-py.cc
index 065fb65..2c2115c 100644
--- src/signal-base-py.cc
+++ src/signal-base-py.cc
@@ -204,6 +204,33 @@ namespace dynamicgraph {
 	    }
 	  }
 
+	  { // --- HOMOGENEOUS MATRIX SIGNALS --------------------
+	    // Two cases: the signal embeds directly a matrix, or embeds
+	    // an object deriving from matrix.In the first case,
+	    // the signal is directly cast into sig<matrix>.
+	    // In the second case, the derived object can be access as a matrix
+	    // using the signal-ptr<matrix> type.
+	    
+	    //TODO: See if matrix homogeneous can be properly put in linear-algebra.h
+	    typedef Eigen::Transform<double,3, Eigen::Affine> MatrixHomogeneous;
+	    Signal<MatrixHomogeneous,int> * sigmat
+	      = dynamic_cast< Signal<MatrixHomogeneous,int>* >( signal );
+	    if( NULL!= sigmat ) {
+	      return matrixToPython( sigmat->accessCopy().matrix() );
+	    }
+	    
+	    SignalPtr<Eigen::Transform<double,3, Eigen::Affine>,int> sigptr(NULL,"matrix-caster");
+	    try {
+	      sigptr.plug(signal);
+	      return matrixToPython( sigptr.accessCopy().matrix() );
+	    }
+	    catch( dynamicgraph::ExceptionSignal& ex ) {
+	      if( ex.getCode() !=
+		  dynamicgraph::ExceptionSignal::PLUG_IMPOSSIBLE )
+	      throw;
+	    }
+	  }
+	  
 	  Signal<double,int> * sigdouble
 	    = dynamic_cast< Signal<double,int>* >( signal );
 	  if( NULL!= sigdouble )
