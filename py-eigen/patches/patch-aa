diff --git CMakeLists.txt CMakeLists.txt
index f37d345..82e8857 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -23,6 +23,7 @@ INCLUDE(cmake/python.cmake)
 SET(PROJECT_NAME eigenpy)
 SET(PROJECT_DESCRIPTION "Wrapping Eigen3 -- numpy")
 SET(PROJECT_URL "http://github.com/stack-of-tasks/eigenpy")
+OPTION(INSTALL_DOCUMENTATION "Generate and install the documentation" FALSE)
 
 # Disable -Werror on Unix for now.
 SET(CXX_DISABLE_WERROR True)
@@ -72,7 +73,7 @@ INCLUDE_DIRECTORIES(${NUMPY_INCLUDE_DIRS})
 # ----------------------------------------------------
 # --- INCLUDE ----------------------------------------
 # ----------------------------------------------------
-SET(${PROJECT_NAME}_HEADERS
+SET(HEADERS
   src/eigenpy.hpp
   src/exception.hpp
   src/details.hpp
@@ -86,7 +87,7 @@ SET(${PROJECT_NAME}_HEADERS
 MAKE_DIRECTORY("${${PROJECT_NAME}_BINARY_DIR}/include/eigenpy")
 INCLUDE_DIRECTORIES(${${PROJECT_NAME}_BINARY_DIR}/include/eigenpy)
 
-FOREACH(header ${${PROJECT_NAME}_HEADERS})
+FOREACH(header ${HEADERS})
   GET_FILENAME_COMPONENT(headerName ${header} NAME)
   IF(WIN32)
     execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different

diff --git src/details.hpp src/details.hpp
index 2c724f8..9ab072b 100644
--- src/details.hpp
+++ src/details.hpp
@@ -146,26 +146,34 @@ namespace eigenpy
 
       if (!PyArray_Check(obj_ptr)) 
 	{
+#ifndef NDEBUG
 	  std::cerr << "The python object is not a numpy array." << std::endl;
+#endif
 	  return 0;
 	}
 
       if (PyArray_NDIM(obj_ptr) != 2)
 	if ( (PyArray_NDIM(obj_ptr) !=1) || (! MatType::IsVectorAtCompileTime) )
 	  {
+#ifndef NDEBUG
 	    std::cerr << "The number of dimension of the object is not correct." << std::endl;
+#endif
 	    return 0;
 	  }
 
       if ((PyArray_ObjectType(obj_ptr, 0)) != NumpyEquivalentType<T>::type_code)
 	{
+#ifndef NDEBUG
 	  std::cerr << "The internal type as no Eigen equivalent." << std::endl;
+#endif
 	  return 0;
 	}
 
       if (!(PyArray_FLAGS(obj_ptr) & NPY_ALIGNED))
 	{
+#ifndef NDEBUG
 	  std::cerr << "NPY non-aligned matrices are not implemented." << std::endl;
+#endif
 	  return 0;
 	}
       
